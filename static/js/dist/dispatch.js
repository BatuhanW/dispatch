// Generated by CoffeeScript 1.8.0
(function() {
  var Dispatch,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Dispatch = (function() {
    Dispatch.prototype.api = "http://localhost:8000/api/";

    Dispatch.prototype.api_format = "json";

    Dispatch.prototype.models = ["tag", "topic", "image", "attachment", "person"];

    function Dispatch() {
      this.csrfSetup = __bind(this.csrfSetup, this);
      this.csrfSetup();
    }

    Dispatch.prototype.add = function(model, values, callback) {
      var url;
      if (this._hasModel(model)) {
        url = model + "/";
        return this.post(url, values, callback);
      }
    };

    Dispatch.prototype.update = function(model, id, values, callback) {
      var url;
      if (this._hasModel(model)) {
        url = model + "/" + id + "/";
        return this.patch(url, values, callback);
      }
    };

    Dispatch.prototype.remove = function(model, id, callback) {
      var url;
      if (this._hasModel(model)) {
        url = model + "/" + id + "/";
        return this["delete"](url, callback);
      }
    };

    Dispatch.prototype.search = function(model, values, callback) {
      var url;
      if (this._hasModel(model)) {
        url = model + "/";
        return this.get(url, values, callback);
      }
    };

    Dispatch.prototype.get = function(url, values, callback) {
      return $.ajax({
        type: "GET",
        url: this.api + url + "?format=" + this.api_format,
        data: values,
        success: callback
      });
    };

    Dispatch.prototype.post = function(url, values, callback) {
      return $.ajax({
        type: "POST",
        url: this.api + url + "?format=" + this.api_format,
        data: values,
        success: callback
      });
    };

    Dispatch.prototype.patch = function(url, values, callback) {
      return $.ajax({
        type: "PATCH",
        data: values,
        url: this.api + url + "?format=" + this.api_format,
        success: callback
      });
    };

    Dispatch.prototype["delete"] = function(url, callback) {
      return $.ajax({
        type: "DELETE",
        url: this.api + url + "?format=" + this.api_format,
        success: callback
      });
    };

    Dispatch.prototype.upload = function(data, callback) {
      return $.ajax({
        url: 'http://localhost:8000/api/image/?format=json',
        type: 'POST',
        data: data,
        cache: false,
        dataType: 'json',
        processData: false,
        contentType: false,
        success: callback
      });
    };

    Dispatch.prototype.articleAttachments = function(article_id, callback) {
      return this.get('article/attachments/', {
        'resource': article_id
      }, callback);
    };

    Dispatch.prototype._hasModel = function(modelName) {
      return this.models.indexOf(modelName) !== -1;
    };

    Dispatch.prototype.getCookie = function(name) {
      var cookie, cookieValue, cookies, findCookie, _i, _len;
      cookieValue = null;
      if (document.cookie && document.cookie !== '') {
        cookies = document.cookie.split(';');
        findCookie = function(cookie) {
          cookie = jQuery.trim(cookie);
          if (cookie.substring(0, name.length + 1) === (name + '=')) {
            return cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
          }
        };
        for (_i = 0, _len = cookies.length; _i < _len; _i++) {
          cookie = cookies[_i];
          findCookie(cookie);
        }
      }
      return cookieValue;
    };

    Dispatch.prototype.csrfSafeMethod = function(method) {
      return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);
    };

    Dispatch.prototype.csrfSetup = function() {
      return $.ajaxSetup({
        beforeSend: (function(_this) {
          return function(xhr, settings) {
            var csrftoken;
            csrftoken = _this.getCookie('csrftoken');
            if (!_this.csrfSafeMethod(settings.type) && !_this.crossDomain) {
              return xhr.setRequestHeader("X-CSRFToken", csrftoken);
            }
          };
        })(this)
      });
    };

    window.Dispatch = Dispatch;

    return Dispatch;

  })();

}).call(this);
